// =============================================================================
// DEMO R√ì≈ªNYCH EGZEKUTOR√ìW - ExecutorDemo.java
// =============================================================================

import java.util.concurrent.*;
import java.util.List;
import java.util.ArrayList;

/**
 * Klasa demonstrujƒÖca r√≥≈ºne typy egzekutor√≥w dostƒôpnych w java.util.concurrent.
 * Pokazuje charakterystyki i zastosowania ka≈ºdego typu.
 */
public class ExecutorDemo {
    
    public static void main(String[] args) {
        System.out.println("üîß DEMONSTRACJA R√ì≈ªNYCH TYP√ìW EGZEKUTOR√ìW\n");
        
        IBuffer buffer = new ConcurrentBuffer(5);
        
        try {
            // 1. SingleThreadExecutor
            demonstrateSingleThreadExecutor(buffer);
            Thread.sleep(2000);
            
            // 2. FixedThreadPool
            demonstrateFixedThreadPool(buffer);
            Thread.sleep(2000);
            
            // 3. CachedThreadPool
            demonstrateCachedThreadPool(buffer);
            Thread.sleep(2000);
            
            // 4. ScheduledThreadPool
            demonstrateScheduledThreadPool(buffer);
            Thread.sleep(5000);
            
            // 5. WorkStealingPool (Java 8+)
            demonstrateWorkStealingPool(buffer);
            Thread.sleep(2000);
            
        } catch (InterruptedException e) {
            System.err.println("Demo przerwane: " + e.getMessage());
        }
        
        System.out.println("\n‚úÖ Demonstracja zako≈Ñczona!");
    }
    
    /**
     * SingleThreadExecutor - jeden wƒÖtek, kolejno≈õƒá wykonania zachowana.
     */
    private static void demonstrateSingleThreadExecutor(IBuffer buffer) 
            throws InterruptedException {
        System.out.println("1Ô∏è‚É£ SingleThreadExecutor - jeden wƒÖtek roboczy");
        
        ExecutorService executor = Executors.newSingleThreadExecutor();
        
        // Wszystkie zadania bƒôdƒÖ wykonywane sekwencyjnie
        for (int i = 1; i <= 3; i++) {
            final int taskId = i;
            executor.submit(() -> {
                System.out.println("   Zadanie " + taskId + " w wƒÖtku: " + 
                    Thread.currentThread().getName());
                buffer.put(taskId);
            });
        }
        
        shutdownAndWait(executor, "SingleThreadExecutor");
    }
    
    /**
     * FixedThreadPool - sta≈Ça liczba wƒÖtk√≥w, idealne dla znanych obciƒÖ≈ºe≈Ñ.
     */
    private static void demonstrateFixedThreadPool(IBuffer buffer) 
            throws InterruptedException {
        System.out.println("2Ô∏è‚É£ FixedThreadPool - sta≈Ça pula 2 wƒÖtk√≥w");
        
        ExecutorService executor = Executors.newFixedThreadPool(2);
        
        // Maksymalnie 2 zadania r√≥wnolegle
        for (int i = 1; i <= 4; i++) {
            final int taskId = i;
            executor.submit(() -> {
                System.out.println("   Zadanie " + taskId + " w wƒÖtku: " + 
                    Thread.currentThread().getName());
                buffer.put(taskId + 10);
                try { Thread.sleep(500); } catch (InterruptedException e) {}
            });
        }
        
        shutdownAndWait(executor, "FixedThreadPool");
    }
    
    /**
     * CachedThreadPool - dynamiczne tworzenie wƒÖtk√≥w, idealne dla kr√≥tkich zada≈Ñ.
     */
    private static void demonstrateCachedThreadPool(IBuffer buffer) 
            throws InterruptedException {
        System.out.println("3Ô∏è‚É£ CachedThreadPool - dynamiczne wƒÖtki");
        
        ExecutorService executor = Executors.newCachedThreadPool();
        
        // Ka≈ºde zadanie mo≈ºe dostaƒá sw√≥j wƒÖtek
        for (int i = 1; i <= 3; i++) {
            final int taskId = i;
            executor.submit(() -> {
                System.out.println("   Zadanie " + taskId + " w wƒÖtku: " + 
                    Thread.currentThread().getName());
                buffer.put(taskId + 20);
            });
        }
        
        shutdownAndWait(executor, "CachedThreadPool");
    }
    
    /**
     * ScheduledThreadPool - zadania okresowe i op√≥≈∫nione.
     */
    private static void demonstrateScheduledThreadPool(IBuffer buffer) 
            throws InterruptedException {
        System.out.println("4Ô∏è‚É£ ScheduledThreadPool - zadania okresowe");
        
        ScheduledExecutorService executor = Executors.newScheduledThreadPool(2);
        
        // Zadanie z op√≥≈∫nieniem
        executor.schedule(() -> {
            System.out.println("   Zadanie op√≥≈∫nione wykonane!");
            buffer.put(100);
        }, 1, TimeUnit.SECONDS);
        
        // Zadanie okresowe
        ScheduledFuture<?> periodicTask = executor.scheduleAtFixedRate(() -> {
            System.out.println("   Zadanie okresowe: " + System.currentTimeMillis());
        }, 0, 1, TimeUnit.SECONDS);
        
        // Zatrzymaj po 3 sekundach
        executor.schedule(() -> {
            periodicTask.cancel(false);
            System.out.println("   Zadanie okresowe zatrzymane");
        }, 3, TimeUnit.SECONDS);
        
        Thread.sleep(4000);
        shutdownAndWait(executor, "ScheduledThreadPool");
    }
    
    /**
     * WorkStealingPool - work-stealing algorithm, wykorzystuje wszystkie rdzenie CPU.
     */
    private static void demonstrateWorkStealingPool(IBuffer buffer) 
            throws InterruptedException {
        System.out.println("5Ô∏è‚É£ WorkStealingPool - work-stealing algorithm");
        
        ExecutorService executor = Executors.newWorkStealingPool();
        
        List<Future<?>> futures = new ArrayList<>();
        
        // Zadania o r√≥≈ºnym czasie wykonania
        for (int i = 1; i <= 4; i++) {
            final int taskId = i;
            Future<?> future = executor.submit(() -> {
                try {
                    Thread.sleep(taskId * 200); // R√≥≈ºne czasy wykonania
                    System.out.println("   WorkStealing zadanie " + taskId + 
                        " w wƒÖtku: " + Thread.currentThread().getName());
                    buffer.put(taskId + 30);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            });
            futures.add(future);
        }
        
        // Czekaj na wszystkie zadania
        for (Future<?> future : futures) {
            try {
                future.get();
            } catch (ExecutionException e) {
                System.err.println("B≈ÇƒÖd zadania: " + e.getCause());
            }
        }
        
        shutdownAndWait(executor, "WorkStealingPool");
    }
    
    /**
     * Pomocnicza metoda do zamykania egzekutor√≥w.
     */
    private static void shutdownAndWait(ExecutorService executor, String name) 
            throws InterruptedException {
        executor.shutdown();
        if (!executor.awaitTermination(5, TimeUnit.SECONDS)) {
            System.err.println("   ‚ö†Ô∏è " + name + " nie zamknƒÖ≈Ç siƒô w czasie");
            executor.shutdownNow();
        }
        System.out.println("   ‚úÖ " + name + " zamkniƒôty\n");
    }
}
