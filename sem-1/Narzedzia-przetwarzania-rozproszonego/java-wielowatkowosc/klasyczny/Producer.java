// =============================================================================
// KLASA PRODUCENTA - Producer.java
// =============================================================================

/**
 * Producent wstawia sekwencjƒô 100 warto≈õci do bufora.
 * Ka≈ºdy producent ma unikalny zakres warto≈õci, ≈ºeby ≈Çatwiej ≈õledziƒá dane.
 */
public class Producer extends Thread {
    
    private final String name;          // Nazwa producenta (P1, P2, P3)
    private final IBuffer buffer;       // Referencja do wsp√≥≈Çdzielonego bufora
    private final int startValue;       // Pierwsza warto≈õƒá w sekwencji
    private final int itemsCount;       // Liczba element√≥w do wyprodukowania
    private final long delayMs;         // Op√≥≈∫nienie miƒôdzy operacjami
    
    /**
     * Konstruktor producenta.
     * @param name nazwa producenta
     * @param buffer wsp√≥≈Çdzielony bufor
     * @param startValue pierwsza warto≈õƒá sekwencji
     * @param itemsCount liczba element√≥w do wyprodukowania
     * @param delayMs op√≥≈∫nienie miƒôdzy put() w milisekundach
     */
    public Producer(String name, IBuffer buffer, int startValue, 
                   int itemsCount, long delayMs) {
        this.name = name;
        this.buffer = buffer;
        this.startValue = startValue;
        this.itemsCount = itemsCount;
        this.delayMs = delayMs;
        
        // Ustaw nazwƒô wƒÖtku dla ≈Çatwiejszego debugowania
        setName("Producer-" + name);
    }
    
    /**
     * G≈Ç√≥wna pƒôtla producenta.
     * Produkuje itemsCount kolejnych warto≈õci poczƒÖwszy od startValue.
     */
    @Override
    public void run() {
        System.out.println("üè≠ Producent " + name + " rozpoczyna produkcjƒô " + 
                         itemsCount + " element√≥w od " + startValue);
        
        try {
            for (int i = 0; i < itemsCount; i++) {
                int value = startValue + i;
                
                // Wstaw do bufora (mo≈ºe zablokowaƒá je≈õli bufor pe≈Çny)
                buffer.put(value);
                
                System.out.println("üè≠ " + name + " wyprodukowa≈Ç: " + value);
                
                // Symulacja czasu produkcji
                if (delayMs > 0) {
                    Thread.sleep(delayMs);
                }
            }
            
            System.out.println("‚úÖ Producent " + name + " zako≈Ñczy≈Ç produkcjƒô");
            
        } catch (InterruptedException e) {
            System.err.println("‚ùå Producent " + name + " przerwany!");
            Thread.currentThread().interrupt();
        } catch (Exception e) {
            System.err.println("‚ùå B≈ÇƒÖd producenta " + name + ": " + e.getMessage());
            e.printStackTrace();
        }
    }
}