// =============================================================================
// G≈Å√ìWNA APLIKACJA - ProducerConsumerMain.java
// =============================================================================

/**
 * G≈Ç√≥wna klasa uruchamiajƒÖca system Producer-Consumer zgodnie ze specyfikacjƒÖ:
 * - 3 producent√≥w, ka≈ºdy produkuje 100 element√≥w
 * - 3 konsument√≥w, ka≈ºdy konsumuje 100 element√≥w  
 * - Bufor cykliczny o pojemno≈õci 10 element√≥w
 * - Synchronizacja przez wait/notify/synchronized
 */
public class ProducerConsumerMain {
    
    // Konfiguracja systemu zgodna ze specyfikacjƒÖ zadania
    private static final int BUFFER_CAPACITY = 10;      // Pojemno≈õƒá bufora
    private static final int PRODUCERS_COUNT = 3;        // Liczba producent√≥w
    private static final int CONSUMERS_COUNT = 3;        // Liczba konsument√≥w
    private static final int ITEMS_PER_PRODUCER = 100;   // Elementy na producenta
    private static final int ITEMS_PER_CONSUMER = 100;   // Elementy na konsumenta
    private static final int PRODUCER_START_VALUE = 101; // Pierwsza warto≈õƒá (101-200)
    
    // Op√≥≈∫nienia dla lepszej observability
    private static final long PRODUCER_DELAY_MS = 50;
    private static final long CONSUMER_DELAY_MS = 75;
    
    public static void main(String[] args) {
        System.out.println("üöÄ URUCHAMIANIE SYSTEMU PRODUCER-CONSUMER");
        System.out.println("=" .repeat(60));
        System.out.println("üìã SPECYFIKACJA:");
        System.out.println("   ‚Ä¢ Producenci: " + PRODUCERS_COUNT + 
                         " (ka≈ºdy produkuje " + ITEMS_PER_PRODUCER + " element√≥w)");
        System.out.println("   ‚Ä¢ Konsumenci: " + CONSUMERS_COUNT + 
                         " (ka≈ºdy konsumuje " + ITEMS_PER_CONSUMER + " element√≥w)");
        System.out.println("   ‚Ä¢ Bufor cykliczny: " + BUFFER_CAPACITY + " element√≥w");
        System.out.println("   ‚Ä¢ Zakres warto≈õci: " + PRODUCER_START_VALUE + "-" + 
                         (PRODUCER_START_VALUE + ITEMS_PER_PRODUCER - 1));
        System.out.println("   ‚Ä¢ Synchronizacja: synchronized + wait/notify");
        System.out.println("=" .repeat(60));
        System.out.println();
        
        try {
            // Tworzenie wsp√≥≈Çdzielonego bufora cyklicznego
            IBuffer sharedBuffer = new CircularBuffer(BUFFER_CAPACITY);
            
            // Wy≈õwietl poczƒÖtkowy stan bufora
            if (sharedBuffer instanceof CircularBuffer) {
                ((CircularBuffer) sharedBuffer).printBufferState("POCZƒÑTKOWY");
            }
            
            System.out.println();
            
            // ===== TWORZENIE I URUCHAMIANIE PRODUCENT√ìW =====
            
            System.out.println("üè≠ Tworzenie producent√≥w...");
            Thread[] producers = new Thread[PRODUCERS_COUNT];
            
            for (int i = 0; i < PRODUCERS_COUNT; i++) {
                String name = "P" + (i + 1);
                
                // Ka≈ºdy producent ma te same warto≈õci (101-200)
                // Zgodnie ze specyfikacjƒÖ: "poczƒÖwszy od 101"
                producers[i] = new Producer(
                    name, 
                    sharedBuffer, 
                    PRODUCER_START_VALUE,           // Wszyscy od 101
                    ITEMS_PER_PRODUCER,             // 100 element√≥w ka≈ºdy
                    PRODUCER_DELAY_MS
                );
                
                producers[i].start();
                System.out.println("   ‚úì Uruchomiono producenta " + name);
            }
            
            // Ma≈Çe op√≥≈∫nienie przed uruchomieniem konsument√≥w
            Thread.sleep(100);
            
            // ===== TWORZENIE I URUCHAMIANIE KONSUMENT√ìW =====
            
            System.out.println("\nüõí Tworzenie konsument√≥w...");
            Thread[] consumers = new Thread[CONSUMERS_COUNT];
            
            for (int i = 0; i < CONSUMERS_COUNT; i++) {
                String name = "C" + (i + 1);
                
                consumers[i] = new Consumer(
                    name,
                    sharedBuffer,
                    ITEMS_PER_CONSUMER,             // 100 element√≥w ka≈ºdy
                    CONSUMER_DELAY_MS
                );
                
                consumers[i].start();
                System.out.println("   ‚úì Uruchomiono konsumenta " + name);
            }
            
            System.out.println("\nüîÑ Wszystkie wƒÖtki uruchomione. Oczekiwanie na zako≈Ñczenie...\n");
            
            // ===== OCZEKIWANIE NA ZAKO≈ÉCZENIE WSZYSTKICH WƒÑTK√ìW =====
            
            // Czekaj na producent√≥w
            System.out.println("‚è≥ Oczekiwanie na producent√≥w...");
            for (int i = 0; i < PRODUCERS_COUNT; i++) {
                producers[i].join();
                System.out.println("   ‚úì Producent P" + (i + 1) + " zako≈Ñczony");
            }
            
            // Czekaj na konsument√≥w  
            System.out.println("\n‚è≥ Oczekiwanie na konsument√≥w...");
            for (int i = 0; i < CONSUMERS_COUNT; i++) {
                consumers[i].join();
                System.out.println("   ‚úì Konsument C" + (i + 1) + " zako≈Ñczony");
            }
            
            // ===== PODSUMOWANIE =====
            
            System.out.println("\n" + "=" .repeat(60));
            System.out.println("üéâ SYSTEM ZAKO≈ÉCZY≈Å DZIA≈ÅANIE POMY≈öLNIE!");
            System.out.println("=" .repeat(60));
            
            // Wy≈õwietl ko≈Ñcowy stan bufora
            if (sharedBuffer instanceof CircularBuffer) {
                CircularBuffer cb = (CircularBuffer) sharedBuffer;
                cb.printBufferState("KO≈ÉCOWY");
                
                System.out.println("\nüìä STATYSTYKI KO≈ÉCOWE:");
                System.out.println("   ‚Ä¢ Wyprodukowano ≈ÇƒÖcznie: " + 
                                 (PRODUCERS_COUNT * ITEMS_PER_PRODUCER) + " element√≥w");
                System.out.println("   ‚Ä¢ Skonsumowano ≈ÇƒÖcznie: " + 
                                 (CONSUMERS_COUNT * ITEMS_PER_CONSUMER) + " element√≥w");
                System.out.println("   ‚Ä¢ Pozosta≈Ço w buforze: " + cb.size() + " element√≥w");
                System.out.println("   ‚Ä¢ Status bufora: " + 
                                 (cb.isEmpty() ? "PUSTY" : 
                                  cb.isFull() ? "PE≈ÅNY" : "CZƒò≈öCIOWO ZAPE≈ÅNIONY"));
            }
            
            // Analiza balansu produkcja vs konsumpcja
            int totalProduced = PRODUCERS_COUNT * ITEMS_PER_PRODUCER;
            int totalConsumed = CONSUMERS_COUNT * ITEMS_PER_CONSUMER;
            int difference = totalProduced - totalConsumed;
            
            System.out.println("\nüìà ANALIZA BALANSU:");
            if (difference == 0) {
                System.out.println("   ‚úÖ Idealna r√≥wnowaga: produkcja = konsumpcja");
            } else if (difference > 0) {
                System.out.println("   üìà Nadwy≈ºka produkcji: +" + difference + " element√≥w");
            } else {
                System.out.println("   üìâ Niedob√≥r produkcji: " + difference + " element√≥w");
            }
            
        } catch (InterruptedException e) {
            System.err.println("\n‚ùå G≈Ç√≥wny wƒÖtek przerwany: " + e.getMessage());
            Thread.currentThread().interrupt();
        } catch (Exception e) {
            System.err.println("\n‚ùå Nieoczekiwany b≈ÇƒÖd: " + e.getMessage());
            e.printStackTrace();
        }
        
        System.out.println("\nüëã Program zako≈Ñczony.");
    }
}