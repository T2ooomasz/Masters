{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
		"name": "Library API",
		"description": "A comprehensive test suite for the Flask Library API, covering CRUD, ETag, Idempotency, and more.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authors",
			"description": "Tests for the /authors resource, covering full CRUD and pagination.",
			"item": [
				{
					"name": "[POST] Create New Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Sprawdź, czy status odpowiedzi to 201 Created",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test 2: Sprawdź, czy odpowiedź jest w formacie JSON",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Test 3: Parsuj odpowiedź i sprawdź strukturę danych",
									"pm.test(\"Response body has the correct structure and data\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name', 'Fyodor Dostoevsky');",
									"    pm.expect(responseData).to.have.property('bio');",
									"    pm.expect(responseData).to.have.property('birth_year', 1821);",
									"    pm.expect(responseData).to.have.property('created_at');",
									"    pm.expect(responseData).to.have.property('updated_at');",
									"    pm.expect(responseData).to.have.property('etag');",
									"});",
									"",
									"// Test 4: Sprawdź, czy nagłówek 'Location' jest obecny i poprawny",
									"pm.test(\"Location header is present and valid\", function () {",
									"    pm.response.to.have.header('Location');",
									"    const location = pm.response.headers.get('Location');",
									"    const responseData = pm.response.json();",
									"    pm.expect(location).to.include(responseData.id);",
									"});",
									"",
									"// Zapisz ID i ETag nowo utworzonego autora do zmiennych kolekcji",
									"const responseData = pm.response.json();",
									"if (responseData.id) {",
									"    pm.collectionVariables.set(\"createdAuthorId\", responseData.id);",
									"}",
									"if (responseData.etag) {",
									"    pm.collectionVariables.set(\"createdAuthorEtag\", responseData.etag);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-test-PUT-123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Fyodor Dostoevsky\",\n    \"bio\": \"A Russian novelist, short story writer, and philosopher.\",\n    \"birth_year\": 1821\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/authors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "[GET] Fetch Created Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"ETag header is present and matches the created ETag\", function () {",
									"    pm.response.to.have.header('ETag');",
									"    const etagInHeader = pm.response.headers.get('ETag').replace(/\"/g, '');",
									"    const expectedEtag = pm.collectionVariables.get(\"createdAuthorEtag\");",
									"    pm.expect(etagInHeader).to.eql(expectedEtag);",
									"});",
									"",
									"pm.test(\"Response body contains the correct author data\", function () {",
									"    const responseData = pm.response.json();",
									"    const expectedId = pm.collectionVariables.get(\"createdAuthorId\");",
									"    ",
									"    pm.expect(responseData.id).to.eql(expectedId);",
									"    pm.expect(responseData.name).to.eql(\"Fyodor Dostoevsky\");",
									"});"
									,
									"",
									"// Test 4: Validate the JSON schema of the response",
									"pm.test(\"Response body matches the author schema\", function () {",
									"    const authorSchema = {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": { \"type\": \"string\", \"pattern\": \"^[0-9a-f\\\\-]+\" },",
									"            \"name\": { \"type\": \"string\" },",
									"            \"bio\": { \"type\": [\"string\", \"null\"] },",
									"            \"birth_year\": { \"type\": [\"integer\", \"null\"] },",
									"            \"created_at\": { \"type\": \"string\"},",
									"            \"updated_at\": { \"type\": \"string\"},",
									"            \"etag\": { \"type\": \"string\" }",
									"        },",
									"        \"required\": [\"id\", \"name\", \"created_at\", \"updated_at\", \"etag\"]",
									"    };",
									"",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.jsonSchema(authorSchema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/authors/{{createdAuthorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors",
								"{{createdAuthorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Full Update Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body reflects the update\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.eql(\"Leo Tolstoy\");",
									"    pm.expect(responseData.birth_year).to.eql(1828);",
									"    pm.expect(responseData.bio).to.eql(\"Wrote 'War and Peace'.\");",
									"});",
									"",
									"pm.test(\"ETag has changed after update\", function() {",
									"    const oldEtag = pm.collectionVariables.get(\"createdAuthorEtag\");",
									"    const newEtag = pm.response.json().etag;",
									"    pm.expect(newEtag).to.not.eql(oldEtag);",
									"});",
									"",
									"// Update the ETag variable for the next request",
									"const newEtag = pm.response.json().etag;",
									"pm.collectionVariables.set(\"createdAuthorEtag\", newEtag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"value": "\"{{createdAuthorEtag}}\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Leo Tolstoy\",\n    \"bio\": \"Wrote 'War and Peace'.\",\n    \"birth_year\": 1828\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/authors/{{createdAuthorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors",
								"{{createdAuthorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PATCH] Partial Update Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body reflects the partial update\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.eql(\"Leo Tolstoy\"); // Should be unchanged",
									"    pm.expect(responseData.bio).to.eql(\"One of the greatest authors of all time.\"); // Should be updated",
									"});",
									"",
									"// Update the ETag again",
									"const newEtag = pm.response.json().etag;",
									"pm.collectionVariables.set(\"createdAuthorEtag\", newEtag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"value": "\"{{createdAuthorEtag}}\""
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-test-PATCH-123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bio\": \"One of the greatest authors of all time.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/authors/{{createdAuthorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors",
								"{{createdAuthorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[DELETE] Delete Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.eql('');",
									"    pm.response.to.have.body(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "If-Match",
								"value": "\"{{createdAuthorEtag}}\""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/authors/{{createdAuthorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors",
								"{{createdAuthorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[GET] Verify Author Deletion (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found after deletion\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/authors/{{createdAuthorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors",
								"{{createdAuthorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[GET] List Authors (Pagination)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct pagination structure\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('data');",
									"    pm.expect(responseData.data).to.be.an('array');",
									"    pm.expect(responseData).to.have.property('pagination');",
									"});",
									"",
									"pm.test(\"Link header for 'next' is present\", function() {",
									"    pm.response.to.have.header('Link');",
									"    const linkHeader = pm.response.headers.get('Link');",
									"    pm.expect(linkHeader).to.include('rel=\"next\"');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/authors?page=1&limit=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Books & ETag Mechanism",
			"description": "Tests for the /books resource, with a focus on ETag and lost update prevention.",
			"item": [
				{
					"name": "[SETUP] Create Author for Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This request ensures a predictable author exists for book tests.",
									"pm.test(\"Setup Author Created\", () => pm.response.to.have.status(201));",
									"",
									"const responseData = pm.response.json();",
									"pm.collectionVariables.set(\"bookAuthorId\", responseData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-books-author"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Author for Books\",\n    \"bio\": \"An author created specifically for testing book endpoints.\",\n    \"birth_year\": 1990\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/authors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Create New Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", () => pm.response.to.have.status(201));",
									"",
									"// Save book ID and ETag for subsequent tests",
									"const responseData = pm.response.json();",
									"pm.collectionVariables.set(\"createdBookId\", responseData.id);",
									"pm.collectionVariables.set(\"createdBookEtag\", responseData.etag);",
									"pm.collectionVariables.set(\"originalBookData\", JSON.stringify(responseData));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-book-123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"A Book to Test ETags\",\n    \"author_id\": \"{{bookAuthorId}}\",\n    \"copies\": 10,\n    \"publication_year\": 2023\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Update Book (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => pm.response.to.have.status(200));",
									"",
									"pm.test(\"ETag has changed after successful update\", () => {",
									"    const oldEtag = pm.collectionVariables.get(\"createdBookEtag\");",
									"    const newEtag = pm.response.json().etag;",
									"    pm.expect(newEtag).to.not.eql(oldEtag);",
									"});",
									"",
									"// Save the new ETag",
									"const newEtag = pm.response.json().etag;",
									"pm.collectionVariables.set(\"createdBookEtag\", newEtag);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"value": "\"{{createdBookEtag}}\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"A Book to Test ETags (Updated)\",\n    \"author_id\": \"{{bookAuthorId}}\",\n    \"copies\": 15,\n    \"publication_year\": 2023\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/books/{{createdBookId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								"{{createdBookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Update Book (Fail - Lost Update)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412 Precondition Failed\", function () {",
									"    pm.response.to.have.status(412);",
									"});",
									"",
									"pm.test(\"Error response body is correct for Precondition Failed\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.error).to.eql(\"Precondition Failed\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This pre-request script simulates a 'lost update' scenario.",
									"// It sends a PATCH request to change the resource on the server.",
									"// This will cause the ETag to change, making the ETag used in the main PUT request stale.",
									"",
									"const updateRequest = {",
									"  url: pm.collectionVariables.get('baseUrl') + '/books/' + pm.collectionVariables.get('createdBookId'),",
									"  method: 'PATCH',",
									"  header: {",
									"    'Content-Type': 'application/json',",
									"    'If-Match': '\"' + pm.collectionVariables.get('createdBookEtag') + '\"'",
									"  },",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({ description: 'An intermediate update happened here.' })",
									"  }",
									"};",
									"",
									"pm.sendRequest(updateRequest, (err, res) => {",
									"  if (err) {",
									"    console.error('Pre-request PATCH failed:', err);",
									"  } else {",
									"    console.log('Pre-request PATCH successful. ETag on server has changed.');",
									"    // We store the now-stale ETag to be used by the main PUT request",
									"    pm.collectionVariables.set(\"staleEtagForLostUpdateTest\", pm.collectionVariables.get(\"createdBookEtag\"));",
									"    // And update the main ETag to the newest one",
									"    const newEtag = res.json().etag;",
									"    pm.collectionVariables.set(\"createdBookEtag\", newEtag);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"value": "\"{{staleEtagForLostUpdateTest}}\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"A Book to Test ETags (Lost Update Attempt)\",\n    \"author_id\": \"{{bookAuthorId}}\",\n    \"copies\": 20,\n    \"publication_year\": 2023\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/books/{{createdBookId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								"{{createdBookId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders & Idempotency",
			"description": "Tests for the /orders resource, focusing on idempotency.",
			"item": [
				{
					"name": "[POST] Create Order (First Time)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique idempotency key for this test run",
									"const idempotencyKey = pm.variables.replaceIn('{{$guid}}');",
									"pm.collectionVariables.set(\"idempotencyKey\", idempotencyKey);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created for the first request\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body is a valid order object\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('status', 'created');",
									"    pm.expect(responseData).to.have.property('bookId', pm.collectionVariables.get(\"createdBookId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "{{idempotencyKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": \"{{createdBookId}}\",\n    \"quantity\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Create Order (Second Time - Idempotent)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created (from cache)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body is the same as the first request\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('status', 'created');",
									"});",
									"",
									"// You could also add a test to check if the number of copies of the book",
									"// has not been decremented a second time, but that requires another GET request."
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "{{idempotencyKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": \"{{createdBookId}}\",\n    \"quantity\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Batch Operations",
			"description": "Tests for batch endpoints like bulk-update.",
			"item": [
				{
					"name": "[POST] Bulk Update (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => pm.response.to.have.status(200));",
									"",
									"pm.test(\"Response indicates successful update\", () => {",
									"    const res = pm.response.json();",
									"    pm.expect(res.status).to.eql(\"Completed successfully\");",
									"    pm.expect(res.updated_count).to.eql(1);",
									"    pm.expect(res.updated_books[0].copies).to.eql(99);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-BULK-UPDATE-123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookIds\": [\"{{createdBookId}}\"],\n    \"updates\": {\n        \"copies\": 99\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/batch/bulk-update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batch",
								"bulk-update"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST] Bulk Update (Fail - Atomicity)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412 Validation error\", () => pm.response.to.have.status(412));",
									"",
									"pm.test(\"Response indicates failure due to missing book\", () => {",
									"    const res = pm.response.json();",
									"    pm.expect(res.error).to.eql(\"Validation error\");",
									"    pm.expect(res.details).to.include(\"Book with id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-BULK-UPDATE-456"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookIds\": [\"{{createdBookId}}\", \"non-existent-book-id\"],\n    \"updates\": {\n        \"copies\": 101\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/batch/bulk-update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batch",
								"bulk-update"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation & Error Handling",
			"description": "Tests for various validation rules and error conditions (4xx status codes).",
			"item": [
				{
					"name": "[POST /authors] Fail - Missing Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response indicates missing field\", () => {",
									"    const res = pm.response.json();",
									"    pm.expect(res.error).to.eql(\"Validation error\");",
									"    pm.expect(res.details).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-missing-name"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bio\": \"An author without a name.\",\n    \"birth_year\": 2000\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/authors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST /books] Fail - Non-existent Author ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response indicates author does not exist\", () => {",
									"    const res = pm.response.json();",
									"    pm.expect(res.error).to.eql(\"Validation error\");",
									"    pm.expect(res.details).to.include(\"does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-non-existent-author-123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Book with a ghost author\",\n    \"author_id\": \"ghost-author-123\",\n    \"copies\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST /orders] Fail - Insufficient Stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 Conflict\", () => {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Error response indicates insufficient stock\", () => {",
									"    const res = pm.response.json();",
									"    pm.expect(res.error).to.eql(\"Insufficient stock\");",
									"    pm.expect(res.details).to.include(\"Not enough copies\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "{{$guid}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": \"{{createdBookId}}\",\n    \"quantity\": 9999\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation & Error Handling",
			"description": "Tests for various validation rules and error conditions (4xx status codes).",
			"item": [
				{
					"name": "[POST /authors] Fail - Missing Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response indicates missing field\", () => {",
									"    const res = pm.response.json();",
									"    pm.expect(res.error).to.eql(\"Validation error\");",
									"    pm.expect(res.details).to.include(\"name' is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-missing-head-123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bio\": \"An author without a name.\",\n    \"birth_year\": 2000\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/authors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST /authors] Fail - Invalid Data Type for Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response indicates invalid data type\", () => {",
									"    const res = pm.response.json();",
									"    pm.expect(res.error).to.eql(\"Validation error\");",
									"    pm.expect(res.details).to.include(\"must be a non-empty string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-invalid-data-type-123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": 12345,\n    \"bio\": \"Name is a number, which is wrong.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/authors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST /books] Fail - Non-existent Author ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response indicates author does not exist\", () => {",
									"    const res = pm.response.json();",
									"    pm.expect(res.error).to.eql(\"Validation error\");",
									"    pm.expect(res.details).to.include(\"does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-non-existent-author-4567"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Book with a ghost author\",\n    \"author_id\": \"ghost-author-123\",\n    \"copies\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST /orders] Fail - Insufficient Stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 Conflict\", () => {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Error response indicates insufficient stock\", () => {",
									"    const res = pm.response.json();",
									"    pm.expect(res.error).to.eql(\"Insufficient stock\");",
									"    pm.expect(res.details).to.include(\"Not enough copies\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "{{$guid}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": \"{{createdBookId}}\",\n    \"quantity\": 9999\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST /batch] Fail - Invalid Payload Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response indicates invalid payload format\", () => {",
									"    const res = pm.response.json();",
									"    pm.expect(res.error).to.eql(\"Invalid payload format\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-invalid-payload-123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookIds\": \"this-is-not-an-array\",\n    \"updates\": {\n        \"copies\": 10\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/batch/bulk-update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batch",
								"bulk-update"
							]
						}
					},
					"response": []
				},
				{
					"name": "[POST /batch] Fail - Invalid Update Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", () => {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response indicates field cannot be updated\", () => {",
									"    const res = pm.response.json();",
									"    pm.expect(res.error).to.eql(\"Validation error\");",
									"    pm.expect(res.details).to.include(\"cannot be updated\");",
									"    pm.expect(res.details).to.include(\"'id'\"); // Check that it names the invalid field",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-invalid-update-field-123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookIds\": [\"{{createdBookId}}\"],\n    \"updates\": {\n        \"id\": \"cannot-change-id\",\n        \"copies\": 5\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/batch/bulk-update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"batch",
								"bulk-update"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "End-to-End Scenarios",
			"description": "Complex tests that involve multiple requests and resources to verify data integrity and business logic.",
			"item": [
				{
					"name": "Cascade Delete: Author and Books",
					"item": [
						{
							"name": "[SETUP] Create Author for Cascade Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", () => pm.response.to.have.status(201));",
											"const res = pm.response.json();",
											"pm.collectionVariables.set(\"cascadeAuthorId\", res.id);",
											"pm.collectionVariables.set(\"cascadeAuthorEtag\", res.etag);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-cascade-test-author-123"
							}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Author to be Deleted\",\n    \"bio\": \"This author exists only to test cascade deletion.\",\n    \"birth_year\": 1950\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/authors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authors"
									]
								}
							},
							"response": []
						},
						{
							"name": "[SETUP] Create Book for This Author",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", () => pm.response.to.have.status(201));",
											"const res = pm.response.json();",
											"pm.collectionVariables.set(\"cascadeBookId\", res.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
								"key": "Idempotency-Key",
								"value": "Idempotency-Key-for-cascade-test-book-123"
							}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Book to be Deleted by Cascade\",\n    \"author_id\": \"{{cascadeAuthorId}}\",\n    \"copies\": 1\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/books",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books"
									]
								}
							},
							"response": []
						},
						{
							"name": "[ACTION] Delete the Author",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204 No Content\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "If-Match",
										"value": "\"{{cascadeAuthorEtag}}\""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authors/{{cascadeAuthorId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authors",
										"{{cascadeAuthorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[VERIFY] Check Book is Also Deleted (404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not Found for the book\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error response confirms book is not found\", () => {",
											"    const res = pm.response.json();",
											"    pm.expect(res.error).to.eql(\"Book not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/{{cascadeBookId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										"{{cascadeBookId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[VERIFY] Check Author is Deleted (404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 Not Found for the author\", () => {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/authors/{{cascadeAuthorId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authors",
										"{{cascadeAuthorId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000/api/v1",
			"type": "string"
		},
		{
			"key": "createdAuthorId",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdAuthorEtag",
			"value": "",
			"type": "string"
		},
		{
			"key": "bookAuthorId",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdBookId",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdBookEtag",
			"value": "",
			"type": "string"
		},
		{
			"key": "idempotencyKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "staleEtagForLostUpdateTest",
			"value": "",
			"type": "string"
		}
	]
}
