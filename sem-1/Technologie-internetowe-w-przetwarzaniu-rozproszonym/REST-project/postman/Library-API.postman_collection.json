{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-a7b8-c9d0-f1a2b3c4d5e6",
		"name": "Projekt II: REST API Biblioteka (Pełne Scenariusze)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Authors (CRUD)",
			"item": [
				{
					"name": "List All Authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Testy ---",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// --- Logowanie ---",
									"console.log(\"Request URL:\", pm.request.url.toString());",
									"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/authors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Testy ---",
									"pm.test(\"Status code is 201 Created and Link header is present\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.have.header(\"Link\");",
									"});",
									"pm.collectionVariables.set(\"authorId\", pm.response.json().id);",
									"",
									"// --- Logowanie ---",
									"console.log(\"Request URL:\", pm.request.url.toString());",
									"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Stanisław Lem\",\n    \"birth_year\": 1921,\n    \"bio\": \"Polish science fiction writer, philosopher, and futurologist.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors"
							]
						},
						"description": "Tworzy nowego autora i zapisuje jego ID jako zmienną kolekcji."
					},
					"response": []
				},
				{
					"name": "Get Author by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Testy ---",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains ETag header\", function () {",
									"    pm.response.to.have.header(\"ETag\");",
									"});",
									"",
									"// --- Logowanie ---",
									"console.log(\"Request URL:\", pm.request.url.toString());",
									"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/authors/{{authorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors",
								"{{authorId}}"
							]
						},
						"description": "Pobiera autora używając ID zapisanego w poprzednim kroku."
					},
					"response": []
				},
				{
					"name": "Update Author (PUT - Full Update)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Testy ---",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// --- Logowanie ---",
									"console.log(\"Request URL:\", pm.request.url.toString());",
									"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Stanisław Lem\",\n    \"birth_year\": 1921,\n    \"bio\": \"Renowned Polish science fiction writer, philosopher, and futurologist.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authors/{{authorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors",
								"{{authorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Partially Update Author (PATCH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Testy ---",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// --- Logowanie ---",
									"console.log(\"Request URL:\", pm.request.url.toString());",
									"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bio\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/authors/{{authorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors",
								"{{authorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Testy ---",
									"pm.test(\"Status code is 204 No Content\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// --- Logowanie ---",
									"console.log(\"Request URL:\", pm.request.url.toString());",
									"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/authors/{{authorId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authors",
								"{{authorId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Books (Pagination & Conditional Updates)",
			"item": [
				{
					"name": "Get Books (Paginated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Testy ---",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains Link header\", function () {",
									"    pm.response.to.have.header(\"Link\");",
									"});",
									"",
									"// --- Logowanie ---",
									"console.log(\"Request URL:\", pm.request.url.toString());",
									"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?page=1&limit=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Scenario: Create and Manage a Book",
					"item": [
						{
							"name": "1. Create New Book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.collectionVariables.set(\"bookId\", pm.response.json().id);",
											"",
											"// --- Logowanie ---",
											"console.log(\"Request URL:\", pm.request.url.toString());",
											"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Solaris\",\n    \"author_id\": \"{{authorId}}\",\n    \"copies\": 10,\n    \"publication_year\": 1961\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/books",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Get Book by ID (and save ETag)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Testy ---",
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"ETag exists\", function () {",
											"    pm.response.to.have.header(\"ETag\");",
											"});",
											"pm.collectionVariables.set(\"bookEtag\", pm.response.headers.get('ETag'));",
											"",
											"// --- Logowanie ---",
											"console.log(\"Request URL:\", pm.request.url.toString());",
											"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/{{bookId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										"{{bookId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Update Book (PUT) - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Testy ---",
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"// Save the new ETag for the next request",
											"pm.collectionVariables.set(\"bookEtag\", pm.response.headers.get('ETag'));",
											"",
											"// --- Logowanie ---",
											"console.log(\"Request URL:\", pm.request.url.toString());",
											"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "If-Match",
										"value": "{{bookEtag}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Solaris\",\n    \"author_id\": \"{{authorId}}\",\n    \"copies\": 8,\n    \"publication_year\": 1961\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/books/{{bookId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										"{{bookId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Update Book (PUT) - Fail (Stale ETag)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Testy ---",
											"pm.test(\"Status code is 412 Precondition Failed\", function () {",
											"    pm.response.to.have.status(412);",
											"});",
											"",
											"// --- Logowanie ---",
											"console.log(\"Request URL:\", pm.request.url.toString());",
											"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "If-Match",
										"value": "\"stary-lub-zly-etag\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Solaris\",\n    \"author_id\": \"{{authorId}}\",\n    \"copies\": 1,\n    \"publication_year\": 1961\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/books/{{bookId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										"{{bookId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Partially Update Book (PATCH)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Testy ---",
											"pm.test(\"Status code is 200 OK\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"// Save the new ETag for the next request",
											"pm.collectionVariables.set(\"bookEtag\", pm.response.headers.get('ETag'));",
											"",
											"// --- Logowanie ---",
											"console.log(\"Request URL:\", pm.request.url.toString());",
											"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "If-Match",
										"value": "{{bookEtag}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"copies\": 7\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/books/{{bookId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										"{{bookId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Delete Book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Testy ---",
											"pm.test(\"Status code is 204 No Content\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// --- Logowanie ---",
											"console.log(\"Request URL:\", pm.request.url.toString());",
											"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "If-Match",
										"value": "{{bookEtag}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/books/{{bookId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										"{{bookId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "3. Orders (Idempotency Demonstration)",
			"item": [
				{
					"name": "Scenario: Handling Repeated Requests",
					"item": [
						{
							"name": "1. Submit Order (First Attempt)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generujemy unikalny klucz dla tej operacji i zapisujemy go",
											"// aby móc go użyć w kolejnym, zduplikowanym żądaniu.",
											"pm.collectionVariables.set(\"idempotencyKey\", pm.variables.get(\"{{$guid}}\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Testy ---",
											"pm.test(\"Status code is 201 Created\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"// Zapisujemy odpowiedź, aby porównać ją z odpowiedzią na zduplikowane żądanie",
											"pm.collectionVariables.set(\"firstOrderResponse\", pm.response.text());",
											"",
											"// --- Logowanie ---",
											"console.log(\"Request URL:\", pm.request.url.toString());",
											"console.log(\"Idempotency-Key:\", pm.collectionVariables.get(\"idempotencyKey\"));",
											"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Idempotency-Key",
										"value": "{{idempotencyKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bookId\": \"2\",\n    \"quantity\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Resubmit Order (Network Error Simulation)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Testy ---",
											"// Serwer powinien zwrócić 200 OK (lub 201, w zależności od implementacji) dla zduplikowanego żądania",
											"pm.test(\"Status code is successful (200 or 201)\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"pm.test(\"Response body is identical to the first one\", function () {",
											"    const firstResponse = pm.collectionVariables.get(\"firstOrderResponse\");",
											"    pm.response.to.have.body(firstResponse);",
											"});",
											"",
											"// --- Logowanie ---",
											"console.log(\"Request URL:\", pm.request.url.toString());",
											"console.log(\"Idempotency-Key (the same as before):\", pm.collectionVariables.get(\"idempotencyKey\"));",
											"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Idempotency-Key",
										"value": "{{idempotencyKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bookId\": \"2\",\n    \"quantity\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								},
								"description": "Wysyła to samo żądanie z tym samym kluczem idempotencji, aby sprawdzić, czy serwer zwróci zapisaną odpowiedź."
							},
							"response": []
						},
						{
							"name": "3. Submit a NEW Order for the same book",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generujemy NOWY, unikalny klucz dla tej nowej operacji.",
											"pm.collectionVariables.set(\"idempotencyKey\", pm.variables.get(\"{{$guid}}\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// --- Testy ---",
											"pm.test(\"Status code is 201 Created\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response body is different from the first order\", function () {",
											"    const firstResponse = pm.collectionVariables.get(\"firstOrderResponse\");",
											"    pm.expect(pm.response.text()).to.not.equal(firstResponse);",
											"});",
											"",
											"// --- Logowanie ---",
											"console.log(\"Request URL:\", pm.request.url.toString());",
											"console.log(\"Idempotency-Key (NEW and UNIQUE):\", pm.collectionVariables.get(\"idempotencyKey\"));",
											"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
											"console.log(\"Response Body:\", pm.response.text());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Idempotency-Key",
										"value": "{{idempotencyKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"bookId\": \"2\",\n    \"quantity\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								},
								"description": "Wysyła żądanie z NOWYM kluczem idempotencji, co powinno utworzyć zupełnie nowe zamówienie."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "4. Controller (Bulk Update)",
			"item": [
				{
					"name": "Bulk Update Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Testy ---",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status', 'Completed');",
									"    pm.expect(jsonData).to.have.property('updated');",
									"    pm.expect(jsonData).to.have.property('notFound');",
									"    pm.expect(jsonData.updated).to.be.an('array');",
									"    pm.expect(jsonData.notFound).to.be.an('array');",
									"});",
									"",
									"// --- Logowanie ---",
									"console.log(\"Request URL:\", pm.request.url.toString());",
									"console.log(\"Response Status:\", pm.response.code, pm.response.status);",
									"console.log(\"Response Body:\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookIds\": [\"1\", \"2\", \"non-existent-id\"],\n    \"updates\": {\n        \"copies\": 99\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bulk-update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bulk-update"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000/api/v1"
		}
	]
}
